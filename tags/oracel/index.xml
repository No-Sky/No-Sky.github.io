<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>oracel on Note</title><link>https://no-sky.github.io/tags/oracel/</link><description>Recent content in oracel on Note</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 12 Dec 2017 19:38:50 +0000</lastBuildDate><atom:link href="https://no-sky.github.io/tags/oracel/index.xml" rel="self" type="application/rss+xml"/><item><title>Oracle笔记 （十四）</title><link>https://no-sky.github.io/2017/oracle%E7%AC%94%E8%AE%B0-%E5%8D%81%E5%9B%9B/</link><pubDate>Tue, 12 Dec 2017 19:38:50 +0000</pubDate><guid>https://no-sky.github.io/2017/oracle%E7%AC%94%E8%AE%B0-%E5%8D%81%E5%9B%9B/</guid><description>游标、存储过程 ##一、游标参数的传递 例：
SET SERVEROUTPUT ON DECLARE V_empno NUMBER(5); V_ename VARCHAR2(10); CURSOR emp_cursor(p_deptno NUMBER,p_job VARCHAR2) IS SELECT empno,ename FROM emp WHERE deptno = p_deptno AND job = p_job; BEGIN OPEN emp_cursor(10, &amp;#39;CLERK&amp;#39;); LOOP FETCH emp_cursor INTO v_empno,v_ename; EXIT WHEN emp_cursor%NOTFOUND; DBMS_OUTPUT.PUT_LINE(v_empno||&amp;#39;,&amp;#39;||v_ename); END LOOP; END; 二、异常处理 错误处理的语法如下：
EXCEPTION WHEN 错误1[OR 错误2] THEN 语句序列1; WHEN 错误3[OR 错误4] THEN 语句序列2; ... WHEN OTHERS 语句序列n; END; 例：
SET SERVEROUTPUT ON DECLARE v_name VARCHAR2(10); BEGIN SELECT ename INTO v_name FROM emp WHERE empno = 1234; DBMS_OUTPUT.</description></item><item><title>Oracle笔记 （十三）</title><link>https://no-sky.github.io/2017/oracle%E7%AC%94%E8%AE%B0-%E5%8D%81%E4%B8%89/</link><pubDate>Tue, 05 Dec 2017 19:11:04 +0000</pubDate><guid>https://no-sky.github.io/2017/oracle%E7%AC%94%E8%AE%B0-%E5%8D%81%E4%B8%89/</guid><description>PL/SQL空值语句、游标 一、IF语句 1、IF-THEN-END IF形式 2、IF-THEN-ELSE-END IF形式 3．IF-THEN-ELSIF-ELSE-END IF形式 ##二、CASE语句
1．基本CASE结构 2.搜索CASE结构 三、循环 1．基本LOOP循环 2.FOR LOOP循环 FOR循环是固定次数循环，格式如下：
注：循环控制变量是隐含定义的，不需要声明。 ​ 下限和上限用于指明循环次数。正常情况下循环控制变量的取值由下限到上限递增，REVERSE关键字表示循环控制变量的取值由上限到下限递减。
3．WHILE LOOP循环 四、游标 1、概念 游标是SQL的一个内存工作区，由系统或用户以变量的形式定义。游标的作用就是用于临时存储从数据库中提取的数据块。在某些情况下，需要把数据从存放在磁盘的表中调到计算机内存中进行处理，最后将处理结果显示出来或最终写回数据库。这样数据处理的速度才会提高，否则频繁的磁盘数据交换会降低效率。
游标有两种类型：显式游标和隐式游标。
在前述程序中用到的SELECT&amp;hellip;INTO&amp;hellip;查询语句，一次只能从数据库中提取一行数据，系统都会使用一个隐式游标。
显式游标对应一个返回结果为多行多列的SELECT语句。
游标一旦打开，数据就从数据库中传送到游标变量中，然后应用程序再从游标变量中分解出需要的数据，并进行处理。
2、隐式游标属性 隐式游标的属性 返回值类型 意义 SQL%ROWCOUNT 整型 代表DML语句成功执行的数据行数 SQL%FOUND 布尔型 值为TRUE代表插入、删除、更新或单行查询操作成功 SQL%NOTFOUND 布尔型 与SQL%FOUND属性返回值相反 SQL%ISOPEN 布尔型 DML执行过程中为真，结束后为假 如：使用隐式游标的属性，判断对雇员工资的修改是否成功。
SET SERVEROUTPUT ON BEGIN UPDATE emp SET sal=sal+100 WHERE empno=1234; IF SQL%FOUND THEN DBMS_OUTPUT.</description></item><item><title>Oracle笔记 （十二）</title><link>https://no-sky.github.io/2017/oracle%E7%AC%94%E8%AE%B0-%E5%8D%81%E4%BA%8C/</link><pubDate>Tue, 05 Dec 2017 18:40:55 +0000</pubDate><guid>https://no-sky.github.io/2017/oracle%E7%AC%94%E8%AE%B0-%E5%8D%81%E4%BA%8C/</guid><description>索引、同义词、数据库链接、PL/SQL语句 一、索引 索引(INDEX)是为了加快数据的查找而创建的数据库对象，特别是对大表，索引可以有效地提高查找速度，也可以保证数据的惟一性
创建索引一般要掌握以下原则：只有较大的表才有必要建立索引，表的记录应该大于50条，查询数据小于总行数的2%～4%。虽然可以为表创建多个索引，但是无助于查询的索引不但不会提高效率，还会增加系统开销。因为当执行DML操作时，索引也要跟着更新，这时索引可能会降低系统的性能。
创建索引：
CREATE INDEX 索引名 ON 表名(列名); 删除索引：
DROP INDEX 索引名； 二、同义词 ** 同义词(SYNONYM)是为模式对象起的别名，可以为表、视图、序列、过程、函数和包等数据库模式对象创建同义词。**
创建私有同义词：
CREATE SYNONYM BOOK FOR 图书； 创建公有同义词(先要获得创建公有同义词的权限)：
CREATE PUBLIC SYNONYM BOOK FOR SCOTT.图书； 删除同义词：
DROP SYNONYM 同义词名； 三、数据库链接 ** 数据库链接(DATABASE LINK)是在分布式环境下，为了访问远程数据库而创建的数据通信链路。**
格式：
CREATE DATABASE LINK 链接名 CONNECT TO 账户 IDENTIFIED BY 口令 USING 服务名; 数据库链接一旦建立并测试成功，就可以使用以下形式来访问远程用户的表。
表名@数据库链接名 四、PL/sql 1、块结构和基本语法要求 块中各部分的作用解释如下：
(1) DECLARE：声明部分标志。 (2) BEGIN：可执行部分标志。 (3) EXCEPTION：异常处理部分标志。 (4) END；：程序结束标志。 2、输出 第一种形式：
DBMS_OUTPUT.PUT(字符串表达式)； 第二种形式：
DBMS_OUTPUT.PUT_LINE(字符串表达式)； 第三种形式：</description></item><item><title>Oracle笔记 （十一）</title><link>https://no-sky.github.io/2017/oracle%E7%AC%94%E8%AE%B0-%E5%8D%81%E4%B8%80/</link><pubDate>Sat, 02 Dec 2017 17:43:26 +0000</pubDate><guid>https://no-sky.github.io/2017/oracle%E7%AC%94%E8%AE%B0-%E5%8D%81%E4%B8%80/</guid><description>分区、视图 一、分区表 在某些场合会使用非常大的表，比如人口信息统计表。如果一个表很大，就会降低查询的速度，并增加管理的难度。一旦发生磁盘损坏，可能整个表的数据就会丢失，恢复比较困难。根据这一情况，可以创建分区表，把一个大表分成几个区(小段)，对数据的操作和管理都可以针对分区进行，这样就可以提高数据库的运行效率。分区可以存在于不同的表空间上，提高了数据的可用性。例：创建和使用分区表。 ​ 如：创建按成绩分区的考生表，共分为3个区：
步骤3：检查A区中的考生：
SELECT * FROM 考生 PARTITION(A); 步骤4：检查全部的考生：
SELECT * FROM 考生; 二、视图 1、视图的概念 视图不同于表，视图本身不包含任何数据。而视图只是一种定义，对应一个查询语句。视图的数据都来自于某些表，这些表被称为基表。 视图可以在表能够使用的任何地方使用，但在对视图的操作上同表相比有些限制，特别是插入和修改操作。对视图的操作将传递到基表，所以在表上定义的约束条件和触发器在视图上将同样起作用。2、视图的创建
2、格式： create [or replace] view 视图名 as select 语句; 例：创建图书作者视图：
CREATE VIEW 图书作者(书名,作者) AS SELECT 图书名称,作者 FROM 图书; 查询视图全部内容
SELECT * FROM 图书作者; 查询部分视图：
SELECT 作者 FROM 图书作者; 删除视图：
DROP VIEW 清华图书; 3．创建只读视图 创建只读视图要用WITH READ ONLY选项。 ​ 例：创建emp表的经理视图：
CREATE OR REPLACE VIEW manager AS SELECT * FROM emp WHERE job= &amp;#39;MANAGER&amp;#39; WITH READ ONLY; 4．使用WITH CHECK OPTION选项 使用WITH CHECK OPTION选项。使用该选项，可以对视图的插入或更新进行限制，即该数据必须满足视图定义中的子查询中的WHERE条件，否则不允许插入或更新。</description></item><item><title>Oracle笔记 （十）</title><link>https://no-sky.github.io/2017/oracle%E7%AC%94%E8%AE%B0-%E5%8D%81/</link><pubDate>Thu, 30 Nov 2017 21:10:31 +0000</pubDate><guid>https://no-sky.github.io/2017/oracle%E7%AC%94%E8%AE%B0-%E5%8D%81/</guid><description>建表 一、建表 格式：
如：
&amp;ndash;创建出版社表
create table 出版社（ 编号 varchar2(2), 出版社名称 varchar2(30), 地址 varchar2(30), 联系电话 varchar2(20) ）; &amp;ndash;创建图书表
create table 图书 ( 图书编号 VARCHAR2(5), 图书名称 VARCHAR2(30), 出版社编号 VARCHAR2(2), 作者 VARCHAR2(10), 出版日期 DATE, 数量 NUMBER(3), 单价 NUMBER(7,2) ); 二、通过子查询建表 步骤1：完全复制图书表到“图书1”
create table 图书1 as select * from 图书; 步骤2：创建新的图书表“图书2”，只包含书名和单价
create table 图书2（书名，单价） as seelct 图书名称，单价 from 图书； 步骤3：创建新的图书表“图书3”，只包含书名和单价，不复制内容
create table 图书3（书名，单价） as select 图书名称，单价 from 图书 where 1=2； 三、添加表的约束 方法一：建表的同时添加约束 如：</description></item><item><title>Oracle笔记 （九）</title><link>https://no-sky.github.io/2017/oracle%E7%AC%94%E8%AE%B0-%E4%B9%9D/</link><pubDate>Wed, 29 Nov 2017 18:49:15 +0000</pubDate><guid>https://no-sky.github.io/2017/oracle%E7%AC%94%E8%AE%B0-%E4%B9%9D/</guid><description>表的增删改操作 一、增删改 增： insert into 表名(列名) values (值)；
删： delete from 表名 where 条件；
改： update 表名 set 列名1=值1，列名2=值2... where 条件；
二、复制数据 1、通过一条查询语句创建一个新表(要求目标表不存在)
```SQL create table manager as select empno,ename,sal, from emp where job= 'CLERK'; ``` 2、通过一条查询语句复制数据(要求目标表必须已建好)
```SQL insert into manager select empno,ename,sal from emp where job = 'CLERK'; ``` 三、序列 1、创建序列 如：创建从2000起始，增量为1 的序列abc：
```SQL create sequence abc increment by 1 start with 2000 maxvalue 99999 cycle nocache; ``` 2、使用序列 序列名.</description></item><item><title>Oracle笔记 （八）</title><link>https://no-sky.github.io/2017/oracle%E7%AC%94%E8%AE%B0-%E5%85%AB/</link><pubDate>Tue, 28 Nov 2017 19:10:30 +0000</pubDate><guid>https://no-sky.github.io/2017/oracle%E7%AC%94%E8%AE%B0-%E5%85%AB/</guid><description>子查询、集合运算 一、子查询 通过把一个查询的结果作为另一个查询的一部分,子查询一般出现在SELECT语句的WHERE子句中，Oracle也支持在FROM或HAVING子句中出现子查询。 子查询比主查询先执行，结果作为主查询的条件，在书写上要用圆括号扩起来，并放在比较运算符的右侧。
1、单行子查询 如：查询比SCOTT工资高的雇员名字和工资。
select ename,sal from emp where sal&amp;gt;(select sal from emp where empno=7788); 2、多行子查询* 如果子查询返回多行的结果，则我们称它为多行子查询。多行子查询要使用不同的比较运算符号，它们是IN、ANY和ALL。
如:查询工资低于任意一个“CLERK”的工资的雇员信息。
select empno,ename,job,sal from emp where sal &amp;lt; any (select sal from emp where job = &amp;#39;CLERK&amp;#39;) and job &amp;lt;&amp;gt; &amp;#39;CLERK&amp;#39;; 如： 查询工资比所有的“SALESMAN”都高的雇员的编号、名字和工资。
select empno,ename,job from emp where job in (select job from emp where deptno = 10) and deptno = 20; 3.多列子查询 **如果子查询返回多列，则对应的比较条件中也应该出现多列，这种查询称为多列子查询。以下是多列子查询的训练实例。 ** 如： 查询职务和部门与SCOTT相同的雇员的信息。
select empno, ename,sal from emp where (job,deptno) = (select job,deptno from emp where empno = 7788); 4．在FROM从句中使用子查询 在FROM从句中也可以使用子查询，在原理上这与在WHERE条件中使用子查询类似。有的时候我们可能要求从雇员表中按照雇员出现的位置来检索雇员，很容易想到的是使用rownum虚列。比如我们要求显示雇员表中6～9位置上的雇员，可以用以下方法</description></item><item><title>Oracle笔记 （七）</title><link>https://no-sky.github.io/2017/oracle%E7%AC%94%E8%AE%B0-%E4%B8%83/</link><pubDate>Mon, 27 Nov 2017 19:20:34 +0000</pubDate><guid>https://no-sky.github.io/2017/oracle%E7%AC%94%E8%AE%B0-%E4%B8%83/</guid><description>多表连接（二）、组函数、分组查询 一、不等连接 拿一个表作为另一表的查询条件或范围
如：显示雇员名称，工资和所属工资等级。
select e.ename,e.sal,s.grade from emp e,salgrade s where e.sal between s.losal and s.hisal; 二、自连接 自连接就是一个表，同本身进行连接。对于自连接可以想像存在两个相同的表(表和表的副本)，可以通过不同的别名区别两个相同的表（其它就是内连接)
如：显示雇员名称和雇员的经理名称
select worker.ename||&amp;#39;的经理是&amp;#39;||manager.ename as 雇员经理 from emp worker,emp manager where worker.mgr=manager.empno; 三、组函数 ** 组函数只能应用于SELECT子句、HAVING子句或ORDER BY子句中。 组函数也可以称为统计函数。 组函数忽略列的空值。 对组可以应用组函数。 在组函数中可使用DISTINCT或ALL关键字。 ALL表示对所有非NULL值(可重复)进行运算。 DISTINCT 表示对每一个非NULL值，如果存在重复值，则组函数只运算一次。如果不指明上述关键字，默认为ALL。 **
函数 说明 AVG 求平均值 COUNT 求计数值，返回非空行数，*表示返回所有行 MAX 求最大值 MIN 求最小值 SUM 求和 SIDDEV 求标准偏差，是根据差的平方根得到的 VARIANCE 求统计方差 四、分组查询 1、如：按职务统计工资总和。</description></item><item><title>Oracle笔记 （六）</title><link>https://no-sky.github.io/2017/oracle%E7%AC%94%E8%AE%B0-%E5%85%AD/</link><pubDate>Sun, 26 Nov 2017 19:23:25 +0000</pubDate><guid>https://no-sky.github.io/2017/oracle%E7%AC%94%E8%AE%B0-%E5%85%AD/</guid><description>一、相等连接 1、三个步骤 A、先列出要显示的列： select ename,job,comm,emp,deptno,dname
B、列出查询的表： from emp,dept
C、列出多表相连条件（主外键）：where emp.deptno=dept.deptno
注意：如果两个表有同名列，那么前面必须接表名 如： emp.deptno ,如果不是同名字段则表名可以省略
2、inner join 的写法 select enaem,job,sal,comm,emp.deptno,dname from emp inner join dept on emp.deptno = dept.deptno; 3、三表或三表以上的写法 select 字段1，字段2 , 字段3 ...from 表1，表2，表3...where 表1.外键 = 表2.主键 and 表1.外键 = 表3.主键 and ... 注意：两个表有一个条件 ，三个表有两个条件 ，四个表有三个条件 以此类推
二、外连接（不等连接） 左外连接即在内连接的基础上，左边表中有但右边表中没有的记录也以null的形式显示出来，右外连接则反之
###1、写法1 (右外连接)
select ename,d.deptno,dname from emp e,dept d where e.deptno(+) = d.deptno (左外连接)
select ename,d.deptno,dname from emp e,dept d where d.</description></item><item><title>Oracle笔记 （五）</title><link>https://no-sky.github.io/2017/oracle%E7%AC%94%E8%AE%B0-%E4%BA%94/</link><pubDate>Sat, 25 Nov 2017 19:20:38 +0000</pubDate><guid>https://no-sky.github.io/2017/oracle%E7%AC%94%E8%AE%B0-%E4%BA%94/</guid><description>函数（二 一、日期型函数 Oracle使用内部数字格式来保存时间和日期，包括世纪、年、月、日、小时、分、秒。缺省日期格式为 DD-MON-YY，如“08-05月-03”代表2003年5月8日。
1、SYSDATE：返回系统日期和时间的虚列函数。
如：返回系统的当前日期。
SELECT sysdate FROM dual; 2、对两个日期相减，得到相隔天数。
通过加小时来增加天数，24小时为一天，如12小时可以写成12/24(或0.5)。 如：例1 假定当前的系统日期是2003年2月6日，求再过1000天的日期。
SELECT sysdate+1000 AS &amp;#34;NEW DATE&amp;#34; FROM dual; 例2：两个日期相减
select to_date(&amp;#39;1-1月-2000&amp;#39;) - to_date(&amp;#39;1-8月-1999&amp;#39;) from dual; 3、其它日期函数 |函数|功能|实例|结果| |-|-|-|-| |months_between|返回两个日期间的月份|months_between (&amp;lsquo;04-11月-05&amp;rsquo;,&amp;lsquo;11-1月-01&amp;rsquo;)57.7741935| |add_months|返回把月份数加到日期上的新日期|add_months(&amp;lsquo;06-2月-03&amp;rsquo;,1)，add_months(&amp;lsquo;06-2月-03&amp;rsquo;,-1)|06-3月-03，06-1月-03| |next_day|返回指定日期后的星期对应的新日期|next_day(&amp;lsquo;06-2月-03&amp;rsquo;,&amp;lsquo;星期一&amp;rsquo;)|10-2月-03| |last_day|返回指定日期所在的月的最后一天|last_day(&amp;lsquo;06-2月-03&amp;rsquo;)|28-2月-03| |round|按指定格式对日期进行四舍五入|round(to_date(&amp;lsquo;13-2月-03&amp;rsquo;),&amp;lsquo;YEAR&amp;rsquo;)，round(to_date(&amp;lsquo;13-2月-03&amp;rsquo;),&amp;lsquo;MONTH&amp;rsquo;)，round(to_date(&amp;lsquo;13-2月-03&amp;rsquo;),&amp;lsquo;DAY&amp;rsquo;)|01-1月-03，01-2月-03，16-2月-03(按周四舍五入)|
如：返回2003年2月的最后一天。
SELECT last_day(&amp;#39;08-2月-03&amp;#39;) FROM dual; 假定当前的系统日期是2003年2月6日，显示部门10雇员的雇佣天数。
SELECT ename, round(sysdate-hiredate) DAYS FROM emp WHERE deptno = 10; 二、转换函数 函数 功能 实例 结果 To_char 转换成字符串类型 To_char(1234.5, &amp;lsquo;$9999.9&amp;rsquo;) $1234.5 To_date 转换成日期类型 To_date(&amp;lsquo;1980-01-01&amp;rsquo;, &amp;lsquo;yyyy-mm-dd&amp;rsquo;) 01-1月-80 To_number 转换成数值类型 To_number(&amp;lsquo;1234.</description></item><item><title>Oracle笔记 （四）</title><link>https://no-sky.github.io/2017/oracle%E7%AC%94%E8%AE%B0-%E5%9B%9B/</link><pubDate>Fri, 24 Nov 2017 18:02:50 +0000</pubDate><guid>https://no-sky.github.io/2017/oracle%E7%AC%94%E8%AE%B0-%E5%9B%9B/</guid><description>条件查询、函数（一） 一、 条件查询 1、模糊查询(between、in、like)
A、between：在某某之间。如,显示工资在1000~2000之间的雇员 select * from emp where sal beteween 1000 and 2000; B、in：在某某之间。如，显示职务为“SALMAN”，“CLEARK”和“MANAGER”的雇员信息 select * from emp where job in (&amp;#39;SALMAN&amp;#39;,&amp;#39;CLERK&amp;#39;,&amp;#39;MANAGER&amp;#39;); C、like：与通配符使用 *通配符：% 代表0个或任意个字符 —_ 代表1个字符* 如：显示姓名以“S”开头的雇员信息。 select * from emp where ename like &amp;#39;S%&amp;#39;; 显示姓名第二个字符为“A”的雇员信息
select * from emp ename like &amp;#39;_A%&amp;#39;; 2、空值查询 空：is null 非空： is not null 如：查询奖金为空的雇员信息
select * from emp where comm is null; 二、函数 1、数学函数</description></item><item><title>Oracle笔记 （三）</title><link>https://no-sky.github.io/2017/oracle%E7%AC%94%E8%AE%B0-%E4%B8%89/</link><pubDate>Thu, 23 Nov 2017 18:48:46 +0000</pubDate><guid>https://no-sky.github.io/2017/oracle%E7%AC%94%E8%AE%B0-%E4%B8%89/</guid><description>Oracle的基本查询 一、基本查询 *select格式：*select 列名 from 表名 ； where 查询条件 group by 分组列 having 分组后条件 order by 排序列 asc[desc]
如：查询部门10的雇员 ​
select * from emp where deptno=10; 二、行号（rownum） 每个表都有一个虚列ROWNUM，它用来显示结果中记录的行号。我们在查询中也可以显示这个列。
如：显示emp表的行号
select rownum,ename from emp; 如：显示前三行
select * from emp where rownum&amp;lt;=3; 三、查询进行计算 如：显示雇员工资上浮20%的结果 ​ select ename,sal,sal*(1+20%) from emp; 如：显示每个员工的总工资（工资+奖金） ​ update emp set comm = o where comm is null; //因为null的特殊性，它与任何值运算都等于null，所以先要把它更新为0，后面我们会学到一个函数来处理null值 ​ select ename,sal+comm from emp;
四、使用别名 如：在查询中使用列别名
select ename as 名称，sal as 工资 from emp; //建议省略as 另，在别名为关键字或有特殊符号时需要加双引号</description></item><item><title>Oracle笔记 （二）</title><link>https://no-sky.github.io/2017/oracle%E7%AC%94%E8%AE%B0-%E4%BA%8C/</link><pubDate>Wed, 22 Nov 2017 13:23:45 +0000</pubDate><guid>https://no-sky.github.io/2017/oracle%E7%AC%94%E8%AE%B0-%E4%BA%8C/</guid><description>一、 创建表空间 （在SqlServer中称为创建一个是数据库，而在Oracle中则称为创建一个表空间）
格式： create tablespace 表空间名 datafile &amp;lsquo;文件路径&amp;rsquo; size 文件大小
如：
cerate tablespace myspace datafile &amp;#39;D:\myspace.dbf&amp;#39; size10MB; 删除表空间：
drop tablespace myspace incluiding contents and datafile; 二、创建用户 格式： create user 用户名 identified by 密码 default tablespace 默认表空间
如：
create user user1 identified by user1 default tablespace system; 删除用户：
drop user user1 cascade; 三、给用户授权 方式一：授予角色
connect //登录 resource //普通权限，用于操作 DBA //管理员权限（慎用） 如：
grant connect to user1; grant connect,resource to user1; 方式二：授予单个权限</description></item><item><title>Oracle笔记 （一）</title><link>https://no-sky.github.io/2017/oracle%E7%AC%94%E8%AE%B0-%E4%B8%80/</link><pubDate>Tue, 21 Nov 2017 18:33:44 +0000</pubDate><guid>https://no-sky.github.io/2017/oracle%E7%AC%94%E8%AE%B0-%E4%B8%80/</guid><description>配置Oracle 1 首先打开Oracle服务
2 配置监听器（这个是因为教室的电脑Oracle安装有问题，没有配置好监听器）开始菜单中找到net configration assistant添加一个监听器
3 用system用户登录sqlplus
4 解锁scott用户 :（也是因为教室的Oracle安装问题导致scott账户未解锁）
alter user scott account unlock; 5 修改scott密码:
alter user scott identified by tiger; 6 使用scott登录sqlplusscott是oracle自带的一个实例账户，它带有四个实例表,其中重要的就是emp员工表与dept部门表7 安装PL/SQL第三方工具因为Oracle没有自带的图形化界面管理器，所以我们需要安装PLSQL，它是oracle的一个第三方GUI工具
介绍一下Oracle的命令
连接数据库：connect scoott/tiger@orcl; &amp;ndash;用户名为scott，密码为tiger,数据库名为orcl 显示当前用户：show user;也可使用查询语句：​ select USER from dual; &amp;ndash;dual是oracle的一个虚拟表 显示表结构(以emp表为例)：describe emp;可简写为：​ desc emp;</description></item></channel></rss>