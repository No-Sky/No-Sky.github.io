<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Network Protocol on Note</title>
    <link>https://no-sky.github.io/tags/network-protocol/</link>
    <description>Recent content in Network Protocol on Note</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 26 Nov 2019 10:54:52 +0800</lastBuildDate>
    
	<atom:link href="https://no-sky.github.io/tags/network-protocol/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CDN</title>
      <link>https://no-sky.github.io/networkprotocol-geektime/cdn/</link>
      <pubDate>Tue, 26 Nov 2019 10:54:52 +0800</pubDate>
      
      <guid>https://no-sky.github.io/networkprotocol-geektime/cdn/</guid>
      <description>网站的一般访问模式。 当一个用户想访问一个网站的时候，指定这个网站的域名，DNS 就会将这个域名解析为地址，然后用户 请求这个地址，返回一个网页。 那这里面还有没有可以优化的地方呢？ 我们先说，我们的网站访问可</description>
    </item>
    
    <item>
      <title>DNS协议</title>
      <link>https://no-sky.github.io/networkprotocol-geektime/dns/</link>
      <pubDate>Tue, 26 Nov 2019 10:54:52 +0800</pubDate>
      
      <guid>https://no-sky.github.io/networkprotocol-geektime/dns/</guid>
      <description>DNS 服务器 在网络世界，你需要记得住网站的名称，但是很难记住网站的 IP 地址，因而需要一个地 址簿，就是DNS 服务器。 由此可见，DNS 在日常生活中多么重要。每个人上网，都需要访问它，但是同时，这对它来讲也是非常</description>
    </item>
    
    <item>
      <title>HTTPDNS协议</title>
      <link>https://no-sky.github.io/networkprotocol-geektime/httpdns/</link>
      <pubDate>Tue, 26 Nov 2019 10:54:52 +0800</pubDate>
      
      <guid>https://no-sky.github.io/networkprotocol-geektime/httpdns/</guid>
      <description>传统 DNS 存在哪些问题？ 域名缓存问题 它可以在本地做一个缓存，也就是说，不是每一个请求，它都会去访问权威 DNS 服务器，而是访问过一 次就把结果缓存到自己本地，当其他人来问的时候，直接就返回这个缓存数据。 域名转发问</description>
    </item>
    
    <item>
      <title>HTTPS协议</title>
      <link>https://no-sky.github.io/networkprotocol-geektime/https/</link>
      <pubDate>Tue, 26 Nov 2019 10:54:52 +0800</pubDate>
      
      <guid>https://no-sky.github.io/networkprotocol-geektime/https/</guid>
      <description>HTTP协议与HTTPS协议的不同在于HTTPS协议对数据进行了加密处理。常用的加密方法有对称加密，非对称加密。 在对称加密算法中，加密和解密使用的密钥是相同的。也就是说，加密和解密使用的是同一个密钥。</description>
    </item>
    
    <item>
      <title>HTTP协议</title>
      <link>https://no-sky.github.io/networkprotocol-geektime/http/</link>
      <pubDate>Tue, 26 Nov 2019 10:54:52 +0800</pubDate>
      
      <guid>https://no-sky.github.io/networkprotocol-geektime/http/</guid>
      <description>HTTP请求的准备 HTTP 协议，几乎是每个人上网用的第一个协议，同时也是很容易被人忽略的协议。 既然说看新闻，咱们就先登录 http://www.163.com 。 http://www.163.com 是个 URL，叫作统一资源定位符。之所以叫统一，是因为它是有格式的。HTTP 称为协</description>
    </item>
    
    <item>
      <title>P2P协议</title>
      <link>https://no-sky.github.io/networkprotocol-geektime/p2p/</link>
      <pubDate>Tue, 26 Nov 2019 10:54:52 +0800</pubDate>
      
      <guid>https://no-sky.github.io/networkprotocol-geektime/p2p/</guid>
      <description>P2P 是什么？ 无论是 HTTP 的方式，还是 FTP 的方式，都有一个比较大的缺点，就是难以解决单一服务器的带宽 压力， 因为它们使用的都是传统的客户端服务器的方式。 后来，一种创新的、称为 P2P 的方式流行起来。P2P就是peer-</description>
    </item>
    
    <item>
      <title>Socket编程</title>
      <link>https://no-sky.github.io/networkprotocol-geektime/socket/</link>
      <pubDate>Tue, 26 Nov 2019 10:54:52 +0800</pubDate>
      
      <guid>https://no-sky.github.io/networkprotocol-geektime/socket/</guid>
      <description>基于 TCP 和 UDP 协议的 Socket 编程 客户端与服务端在通信之前，双方都要建立一个Socket。 在建立 Socket 的时候，应该设置Socket 函数需要指定到底是 IPv4 还是 IPv6，分别对应设置为 AF_INET 和 AF_INET6。Socket 编程</description>
    </item>
    
    <item>
      <title>ICMP与Ping</title>
      <link>https://no-sky.github.io/networkprotocol-geektime/icmp-protocol/</link>
      <pubDate>Fri, 22 Nov 2019 16:40:52 +0800</pubDate>
      
      <guid>https://no-sky.github.io/networkprotocol-geektime/icmp-protocol/</guid>
      <description>ICMP协议的格式 ping 是基于 ICMP 协议工作的。ICMP全称Internet Control Message Protocol，就是互联网控制报文 协议。 ICMP 报文是封装在 IP 包里面的。因为传输指令的时候，肯定需要源地址和目标地址。它本身非常简 单</description>
    </item>
    
    <item>
      <title>ICMP与Ping</title>
      <link>https://no-sky.github.io/networkprotocol-geektime/macip/</link>
      <pubDate>Fri, 22 Nov 2019 16:40:52 +0800</pubDate>
      
      <guid>https://no-sky.github.io/networkprotocol-geektime/macip/</guid>
      <description>Mac头和IP头 在 MAC 头里面，先是目标 MAC 地址，然后是源 MAC 地址，然后有一个协议类型，用来说明里面是 IP 协议。在任何一台机器上，当要访问另一个 IP 地址的时候，都会先判断，这个目标 IP 地址，和当前机器的 IP 地址，是否</description>
    </item>
    
    <item>
      <title>TCP协议</title>
      <link>https://no-sky.github.io/networkprotocol-geektime/tcp-layer/</link>
      <pubDate>Fri, 22 Nov 2019 16:40:52 +0800</pubDate>
      
      <guid>https://no-sky.github.io/networkprotocol-geektime/tcp-layer/</guid>
      <description>TCP协议 TCP协议作为传输层主要协议之一，具有面向连接，端到端，可靠的全双工通信，面向字节流的数据传输协议。 1、TCP报文段 虽然TCP面向字节流，但TCP传输的数据单元却是报文段。TCP报文段分为T</description>
    </item>
    
    <item>
      <title>UDP协议</title>
      <link>https://no-sky.github.io/networkprotocol-geektime/udp-layer/</link>
      <pubDate>Fri, 22 Nov 2019 16:40:52 +0800</pubDate>
      
      <guid>https://no-sky.github.io/networkprotocol-geektime/udp-layer/</guid>
      <description>TCP 和 UDP 有哪些区别？ TCP 是面向连接的，UDP 是面向无连接的。 什么叫面向连接，什么叫无连接呢？在互通之前，面向连接的协议会先建立连接。 所谓的建立连接，是为了在客户端和服务端维护连接，而建立一定的数据结构来维</description>
    </item>
    
  </channel>
</rss>