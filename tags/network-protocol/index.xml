<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Network Protocol on Note</title><link>https://no-sky.github.io/tags/network-protocol/</link><description>Recent content in Network Protocol on Note</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 26 Nov 2019 10:54:52 +0800</lastBuildDate><atom:link href="https://no-sky.github.io/tags/network-protocol/index.xml" rel="self" type="application/rss+xml"/><item><title>CDN</title><link>https://no-sky.github.io/2019/cdn/</link><pubDate>Tue, 26 Nov 2019 10:54:52 +0800</pubDate><guid>https://no-sky.github.io/2019/cdn/</guid><description>网站的一般访问模式。 当一个用户想访问一个网站的时候，指定这个网站的域名，DNS 就会将这个域名解析为地址，然后用户 请求这个地址，返回一个网页。 那这里面还有没有可以优化的地方呢？ 我们先说，我们的网站访问可以借鉴“就近配送”这个思路。 全球有这么多的数据中心，无论在哪里上网，临近不远的地方基本上都有数据中心。是不是可以在这些 数据中心里部署几台机器，形成一个缓存的集群来缓存部分数据，那么用户访问数据的时候，就可以就 近访问了呢？ 这些分布在各个地方的各个数据中心的节点，就称为边缘节点。 由于边缘节点数目比较多，但是每个集群规模比较小，不可能缓存下来所有东西，因而可能无法命中， 这样就会在边缘节点之上。有区域节点，规模就要更大，缓存的数据会更多，命中的概率也就更大。在 区域节点之上是中心节点，规模更大，缓存数据更多。如果还不命中，就只好回源网站访问了。
这就是CDN 的分发系统的架构。CDN 系统的缓存，也是一层一层的，能不访问后端真正的源，就不打 扰它。
接下来就是，客户端如何找到相应的边缘节点进行访问呢？
CDN 的全局负载均衡器解析域名，全局负载均衡器会为用户选择一台合适的缓存服务器提供服务，选择的依据包括：
根据用户 IP 地址，判断哪一台服务器距用户最近； 用户所处的运营商； 根据用户所请求的 URL 中携带的内容名称，判断哪一台服务器上有用户所需的内容； 查询各个服务器当前的负载情况，判断哪一台服务器尚有服务能力。 基于以上这些条件，进行综合分析之后，全局负载均衡器会返回一台缓存服务器的 IP 地址。</description></item><item><title>DNS协议</title><link>https://no-sky.github.io/2019/dns/</link><pubDate>Tue, 26 Nov 2019 10:54:52 +0800</pubDate><guid>https://no-sky.github.io/2019/dns/</guid><description>DNS 服务器 在网络世界，你需要记得住网站的名称，但是很难记住网站的 IP 地址，因而需要一个地 址簿，就是DNS 服务器。
由此可见，DNS 在日常生活中多么重要。每个人上网，都需要访问它，但是同时，这对它来讲也是非常 大的挑战。一旦它出了故障，整个互联网都将瘫痪。另外，上网的人分布在全世界各地，如果大家都去 同一个地方访问某一台服务器，时延将会非常大。因而，DNS 服务器，一定要设置成高可用、高并发和 分布式的。 于是，就有了这样树状的层次结构。
根 DNS 服务器 ：返回顶级域 DNS 服务器的 IP 地址 顶级域 DNS 服务器：返回权威 DNS 服务器的 IP 地址 权威 DNS 服务器 ：返回相应主机的 IP 地址 DNS 解析流程 电脑客户端会发出一个 DNS 请求，，并发给本地域名服务器 (本地DNS)。那本地域名服务器 (本地 DNS) 是什么呢？如果是通过 DHCP 配置，本地 DNS 由你的网络服务商（ISP），如电信、移动等自动分配，它通常就在你网络服务商的某个机房。
本地 DNS 收到来自客户端的请求。你可以想象这台服务器上缓存了一张域名与之对应 IP 地址的大 表格。如果能找到请求域名，它直接就返回 IP 地址。如果没有，本地 DNS 会去问它的根域名服务器。根域名服务器是最高层次的，全球共有 13 套。它不直接用于域名解析，但能指明一条道路。
根 DNS 收到来自本地 DNS 的请求，根据域名后缀转发给对应的顶级域名服务器。</description></item><item><title>HTTPDNS协议</title><link>https://no-sky.github.io/2019/httpdns/</link><pubDate>Tue, 26 Nov 2019 10:54:52 +0800</pubDate><guid>https://no-sky.github.io/2019/httpdns/</guid><description>传统 DNS 存在哪些问题？ 域名缓存问题 它可以在本地做一个缓存，也就是说，不是每一个请求，它都会去访问权威 DNS 服务器，而是访问过一 次就把结果缓存到自己本地，当其他人来问的时候，直接就返回这个缓存数据。
域名转发问题 缓存问题还是说本地域名解析服务，还是会去权威 DNS 服务器中查找，只不过不是每次都要查找。但是 A 运营商偷懒，将解析的请求转发给 B 运营商，B 运营商去权威 DNS 服务器查询的话，权威服务 器会误认为，你是 B 运营商的，那就返回给你一个在 B 运营商的网站地址吧，结果客户的每次访问都要 跨运营商，速度就会很慢。
出口 NAT 问题 出口的时候，很多机房都会配置NAT，也即网络地址转换，使得从这个网关出去的包，都换成新的 IP 地址，当然请求返回的时候，在这个网关，再将 IP 地址转换回去，所以对于访问来说是没有任何问题。但是一旦做了网络地址的转换，权威的 DNS 服务器，就没办法通过这个地址，来判断客户到底是来自哪个运营商，而且极有可能因为转换过后的地址，误判运营商，导致跨运营商的访问。
域名更新问题 本地 DNS 服务器是由不同地区、不同运营商独立部署的。对域名解析缓存的处理上，实现策略也有区 别，有的会偷懒，忽略域名解析结果的 TTL 时间限制，在权威 DNS 服务器解析变更的时候，解析结果 在全网生效的周期非常漫长。但是有的时候，在 DNS 的切换中，场景对生效时间要求比较高。
解析延迟问题 从上一节的 DNS 查询过程来看，DNS 的查询过程需要递归遍历多个 DNS 服务器，才能获得最终的解 析结果，这会带来一定的时延，甚至会解析超时。
HTTPDNS 的工作模式 HTTPNDS 其实就是，不走传统的 DNS 解析，而是自己搭建基于 HTTP 协议的 DNS 服务器集群，分布 在多个地点和多个运营商。当客户端需要 DNS 解析的时候，直接通过 HTTP 协议进行请求这个服务器 集群，得到就近的地址。</description></item><item><title>HTTPS协议</title><link>https://no-sky.github.io/2019/https/</link><pubDate>Tue, 26 Nov 2019 10:54:52 +0800</pubDate><guid>https://no-sky.github.io/2019/https/</guid><description>HTTP协议与HTTPS协议的不同在于HTTPS协议对数据进行了加密处理。常用的加密方法有对称加密，非对称加密。
在对称加密算法中，加密和解密使用的密钥是相同的。也就是说，加密和解密使用的是同一个密钥。因 此，对称加密算法要保证安全性的话，密钥要做好保密。只能让使用的人知道，不能对外公开。 在非对称加密算法中，加密使用的密钥和解密使用的密钥是不相同的。一把是作为公开的公钥，另一把 是作为谁都不能给的私钥。公钥加密的信息，只有私钥才能解密。私钥加密的信息，只有公钥才能解 密。 因为对称加密算法相比非对称加密算法来说，效率要高得多，性能也好，所以交互的场景下多用对称加 密。
数字证书
不对称加密也会有同样的问题，如何将不对称加密的公钥给对方呢？一种是放在一个公网的地址上，让 对方下载；另一种就是在建立连接的时候，传给对方。 这两种方法有相同的问题，那就是，作为一个普通网民，你怎么鉴别别人给你的公钥是对的。会不会有 人冒充外卖网站，发给你一个它的公钥。接下来，你和它所有的互通，看起来都是没有任何问题的。毕 竟每个人都可以创建自己的公钥和私钥。
这个时候就需要权威部门的介入了这个由权威部门颁发的称为证书（Certificate）。这个权威机构我们称为 CA（ Certifcate Authority）。
HTTPS 的工作模式 我们可以知道，非对称加密在性能上不如对称加密，那是否能将两者结合起来呢？例如，公钥私钥主要 用于传输对称加密的秘钥，而真正的双方大数据量的通信都是通过对称加密进行的。 当然是可以的。这就是 HTTPS 协议的总体思路。</description></item><item><title>HTTP协议</title><link>https://no-sky.github.io/2019/http/</link><pubDate>Tue, 26 Nov 2019 10:54:52 +0800</pubDate><guid>https://no-sky.github.io/2019/http/</guid><description>HTTP请求的准备 HTTP 协议，几乎是每个人上网用的第一个协议，同时也是很容易被人忽略的协议。 既然说看新闻，咱们就先登录 http://www.163.com 。 http://www.163.com 是个 URL，叫作统一资源定位符。之所以叫统一，是因为它是有格式的。HTTP 称为协议，www.163.com 是一个域名，表示互联网上的一个位置。有的 URL 会有更详细的位置标识， 例如 http://www.163.com/index.html 。正是因为这个东西是统一的，所以当你把这样一个字符串输 入到浏览器的框里的时候，浏览器才知道如何进行统一处理。
浏览器会将 www.163.com 这个域名发送给 DNS 服务器，让它解析为 IP 地址。
目前使用的 HTTP 协议大部分都是 1.1。在 1.1 的协议里面，默认是开启了 Keep-Alive 的，这样建立的 TCP 连接，就可以在多次请求中复用。
HTTP 请求的构建 建立了连接以后，浏览器就要发送 HTTP 的请求。 请求的格式就像这样。
HTTP 的报文大概分为三大部分。第一部分是请求行，第二部分是请求的首部，第三部分才是请求的正 文实体。 第一部分：请求行 在请求行中，URL 就是 http://www.163.com ，版本为 HTTP 1.1。这里要说一下的，就是方法。方法 有几种类型。 对于访问网页来讲，最常用的类型就是GET。顾名思义，GET 就是去服务器获取一些资源。对于访问网 页来讲，要获取的资源往往是一个页面。其实也有很多其他的格式，比如说返回一个 JSON 字符串，到 底要返回什么，是由服务器端的实现决定的。 另外一种类型叫做POST。它需要主动告诉服务端一些信息，而非获取。要告诉服务端什么呢？一般会放 在正文里面。正文可以有各种各样的格式。常见的格式也是 JSON。
还有一种类型叫PUT，就是向指定资源位置上传最新内容。但是，HTTP 的服务器往往是不允许上传文件 的，所以 PUT 和 POST 就都变成了要传给服务器东西的方法。
在实际使用过程中，这两者还会有稍许的区别。POST 往往是用来创建一个资源的，而 PUT 往往是用来 修改一个资源的</description></item><item><title>P2P协议</title><link>https://no-sky.github.io/2019/p2p/</link><pubDate>Tue, 26 Nov 2019 10:54:52 +0800</pubDate><guid>https://no-sky.github.io/2019/p2p/</guid><description>P2P 是什么？ 无论是 HTTP 的方式，还是 FTP 的方式，都有一个比较大的缺点，就是难以解决单一服务器的带宽 压力， 因为它们使用的都是传统的客户端服务器的方式。 后来，一种创新的、称为 P2P 的方式流行起来。P2P就是peer-to-peer。资源开始并不集中地存储在某 些设备上，而是分散地存储在多台设备上。这些设备我们姑且称为 peer。 想要下载一个文件的时候，你只要得到那些已经存在了文件的 peer，并和这些 peer 之间，建立点对点 的连接，而不需要到中心服务器上。
种子（.torrent）文件 当你想下载一个文件的时候，怎么知道哪些 peer 有这个文件呢？ 这就用到种子啦，也即咱们比较熟悉的.torrent 文件。.torrent 文件由两部分组成，分别是： announce（tracker URL）和文件信息。 文件信息里面有这些内容。 info 区：这里指定的是该种子有几个文件、文件有多长、目录结构，以及目录和文件的名字。 Name 字段：指定顶层目录名字。 每个段的大小：BitTorrent（简称 BT）协议把一个文件分成很多个小段，然后分段下载。 段哈希值：将整个种子中，每个段的 SHA-1 哈希值拼在一起。 P2P 网络需要借助 tracker 中心服务器，这个服务器是用来登记有哪些用户在请求哪些 资源。 所以，这种工作方式有一个弊端，一旦 tracker 服务器出现故障或者线路遭到屏蔽，BT 工具就无法正常 工作了。
去中心化网络（DHT） 后来就有了一种叫作DHT（Distributed Hash Table）的去中心化网络。每个加入这个 DHT 网络 的人，都要负责存储这个网络里的资源信息和其他成员的联系信息，相当于所有人一起构成了一个庞大 的分布式存储数据库。</description></item><item><title>Socket编程</title><link>https://no-sky.github.io/2019/socket/</link><pubDate>Fri, 22 Nov 2019 20:54:52 +0800</pubDate><guid>https://no-sky.github.io/2019/socket/</guid><description>基于 TCP 和 UDP 协议的 Socket 编程 客户端与服务端在通信之前，双方都要建立一个Socket。 在建立 Socket 的时候，应该设置Socket 函数需要指定到底是 IPv4 还是 IPv6，分别对应设置为 AF_INET 和 AF_INET6。Socket 编程进行的是端到端的通信，往往意识不到中间经过多少局域网，多少路由器，因而能够设置的参数，也只能是端到端协议之上网络层和传输层的。在网络层，还记得咱们前面讲过的，TCP 协议是基于数据流的，所以设置为SOCK_STREAM，而 UDP 是基于数据报的，因而设置为 SOCK_DGRAM。
基于 TCP 协议的 Socket 程序函数调用过程 TCP 的服务端要先监听一个端口，一般是先调用 bind 函数，给这个 Socket 赋予一个 IP 地址和端口。当服务端有了 IP 和端口号，就可以调用 listen 函数进行监听。在 TCP 的状态图里面，有一个 listen 状态，当调用这个函数之后，服务端就进入了这个状态，这个时候客户端就可以发起连接了。
在内核中，为每个 Socket 维护两个队列。一个是已经建立了连接的队列，这时候连接三次握手已经完 毕，处于 established 状态；一个是还没有完全建立连接的队列，这个时候三次握手还没完成，处于 syn_rcvd 的状态。 接下来，服务端调用 accept 函数，拿出一个已经完成的连接进行处理。如果还没有完成，就要等着。 在服务端等待的时候，客户端可以通过 connect 函数发起连接。先在参数中指明要连接的 IP 地址和端 口号，然后开始发起三次握手。内核会给客户端分配一个临时的端口。一旦握手成功，服务端的 accept 就会返回另一个 Socket。 监听的 Socket 和真正用来传数据的 Socket 是两个，一个叫作监听 Socket，一个叫作已连接 Socket。连接建立成功之后，双方开始通过 read 和 write 函数来读写数据，就像往一个文件流里面写东西一样。</description></item><item><title>ICMP&amp;Ping</title><link>https://no-sky.github.io/2019/icmp-protocol/</link><pubDate>Fri, 22 Nov 2019 16:40:52 +0800</pubDate><guid>https://no-sky.github.io/2019/icmp-protocol/</guid><description>ICMP协议的格式 ping 是基于 ICMP 协议工作的。ICMP全称Internet Control Message Protocol，就是互联网控制报文 协议。 ICMP 报文是封装在 IP 包里面的。因为传输指令的时候，肯定需要源地址和目标地址。它本身非常简 单。ICMP 报文有很多的类型，不同的类型有不同的代码。最常用的类型是主动请求为 8，主动请求的应答为 0。
查询报文类型 常用的ping 就是查询报文，是一种主动请求，并且获得主动应答的 ICMP 协议。所以，ping 发的包也是符合 ICMP 协议格式的，只不过它在后面增加了自己的格式。对 ping 的主动请求，进行网络抓包，称为ICMP ECHO REQUEST。同理主动请求的回复，称为ICMPECHO REPLY。比起原生的 ICMP，这里面多了两个字段，一个是标识符。在选项数据中，ping 还会存放发送请求的时间值，来计算往返时间，说明路程的长短。
差错报文类型 几个 ICMP 差错报文的例子：终点不可达为 3，源抑制为 4，超时为 11，重定向为 5。 第一种是终点不可达。具体的原因在代码中表示就是，网络不可达代码为 0，主机 不可达代码为 1，协议不可达代码为 2，端口不可达代码为 3，需要进行分片但设置了不分片位代码为 4。 第二种是源站抑制，也就是让源站放慢发送速度。 第三种是时间超时，也就是超过网络包的生存时间还是没到。 第四种是路由重定向，也就是让下次发给另一个路由器。 差错报文的结构相对复杂一些。除了前面还是 IP，ICMP 的前 8 字节不变，后面则跟上出错的那个 IP 包 的 IP 头和 IP 正文的前 8 个字节。</description></item><item><title>Mac&amp;IP</title><link>https://no-sky.github.io/2019/macip/</link><pubDate>Fri, 22 Nov 2019 16:40:52 +0800</pubDate><guid>https://no-sky.github.io/2019/macip/</guid><description>Mac头和IP头 在 MAC 头里面，先是目标 MAC 地址，然后是源 MAC 地址，然后有一个协议类型，用来说明里面是 IP 协议。在任何一台机器上，当要访问另一个 IP 地址的时候，都会先判断，这个目标 IP 地址，和当前机器的 IP 地址，是否在同一个网段。怎么判断同一个网段呢？需要 CIDR 和子网掩码。
如果是同一个网段，直接将源地址和目标地址放入 IP 头中，然后通过 ARP 获得 MAC 地址，将源 MAC 和目的 MAC 放入 MAC 头中，发出去就可以了。 如果不是同一网段，这就需要发往默认网关Gateway。Gateway 的地址一定是和源 IP 地址是一个网段的。往往不是第一个，就是第二个。例如192.168.1.0/24 这个网段，Gateway 往往会是 192.168.1.1/24 或192.168.1.2/24。 如何发往默认网关呢？网关不是和源 IP 地址是一个网段的么？这个过程就和发往同一个网段的其他机器 是一样的：将源地址和目标 IP 地址放入 IP 头中，通过 ARP 获得网关的 MAC 地址，将源 MAC 和网关 的 MAC 放入 MAC 头中，发送出去。网关所在的端口，例如 192.168.1.1/24 将网络包收进来，然后接 下来怎么做，就完全看网关的了。 网关往往是一个路由器，是一个三层转发的设备。啥叫三层设备？前面也说过了，就是把 MAC 头和 IP 头都取下来，然后根据里面的内容，看看接下来把包往哪里转发的设备。 在你的宿舍里面，网关就是你宿舍长的电脑。一个路由器往往有多个网口，如果是一台服务器做这个事 情，则就有多个网卡，其中一个网卡是和源 IP 同网段的。 很多情况下，人们把网关就叫作路由器。其实不完全准确，而另一种比喻更加恰当：路由器是一台设 备，它有五个网口或者网卡，相当于有五只手，分别连着五个局域网。每只手的 IP 地址都和局域网的 IP 地址相同的网段，每只手都是它握住的那个局域网的网关。</description></item><item><title>TCP协议</title><link>https://no-sky.github.io/2019/tcp-layer/</link><pubDate>Fri, 22 Nov 2019 16:40:52 +0800</pubDate><guid>https://no-sky.github.io/2019/tcp-layer/</guid><description>TCP协议 TCP协议作为传输层主要协议之一，具有面向连接，端到端，可靠的全双工通信，面向字节流的数据传输协议。
1、TCP报文段 虽然TCP面向字节流，但TCP传输的数据单元却是报文段。TCP报文段分为TCP首部和数据部分，TCP报文段首部的前20个字节是固定的，后面有4*n字节根据需要动态添加的选项，最大长度为40字节。
源端口和目的端口 各占两个字节，TCP的分用功能也是通过端口实现的。 序号 占4个字节，范围是[0,232],TCP是面向字节流的，每个字节都是按顺序编号。例如一个报文段，序号字段是201，携带数据长度是100，那么第一个数据的序号就是201，最后一个就是300。当达到最大范围，又从0开始。 确认号 占4个字节，是期望收到对方下一个报文段的第一个字节的序号。若确认号=N,则表示序号N前所有的数据已经正确收到了。 数据偏移 占4位，表示报文段的数据部分的起始位置，距离整个报文段的起始位置的距离。间接的指出首部的长度。 保留 占6位，保留使用，目前为0. URG（紧急） 当URG=1,表明紧急指针字段有效，该报文段有紧急数据，应尽快发送。 ACK(确认) 仅当ACK=1时，确认号才有效，连接建立后，所有的报文段ACK都为1。 PSH(推送) 接收方接收到PSH=1的报文段，会尽快交付接收应用经常，不再等待整个缓存填满再交付。实际较少使用。 RST(复位) RST=1时，表明TCP连接中出现严重差错，必须是否连接，再重连。 SYN(同步) 在建立连接时用来同步序号。当SYN=1,ACK=0，则表明是一个连接请求报文段。SYN=1,ACK=1则表示对方同意连接。TCP建立连接用到。 FIN(终止) 用来释放一个连接窗口。当FIN=1时，表明此报文段的发送方不再发送数据，请求释放单向连接。TCP断开连接用到。 窗口 占2个字节，表示发送方自己的接收窗口，窗口值用来告诉对方允许发送的数据量。 校验和 占2字节，检验和字段查验范围包括首部和数据部分。 紧急指针 占2字节，URG=1时，紧急指针指出本报文段中的紧急数据的字节数（紧急字节数结束后为普通字节）。 选项 长度可变，最长可达40字节。例如最大报文段长度MSS。MSS指的是数据部分的长度而不是整个TCP报文段长度，MSS默认为536字节长。窗口扩大，时间戳选项等。 2、TCP建立连接-三次握手 三次握手图例如下,与文字解释配合使用效果更佳。
第一次：客户端发送连接请求报文给服务端，其中SYN=1,seq=x。发送完毕后进入SYN_END状态。
第二次：服务端接收到报文后，发回确认报文，其中ACK=1,ack=x+1，因为需要客户端确认，所以报文中也有SYN=1,seq=y的信息。发送完后进入SYN_RCVD状态。
第三次:客户端接收到报文后,发送确认报文，其中ACK=1,ack=y+1。发送完客户端进入ESTABLISHED状态，服务端接收到报文后，进入ESTABLISHED状态。到此，连接建立完成。
三次握手原因
避免资源被浪费掉。如果在第二步握手时，由于网络延迟导致确认包不能及时到达客户端，那么客户端会认为第一次握手失败，再次发送连接请求，服务端收到后再次发送确认包。在这种情况下，服务端已经创建了两次连接，等待两个客户端发送数据，而实际却只有一个客户端发送数据。
3、TCP断开连接-四次挥手 四次挥手指客户端和服务端各发送一次请求终止连接的报文，同时双方响应彼此的请求。 四次挥手图例如下，请配置文字解释使用哦。
第一次挥手：客户端发送FIN=1，seq=x的包给服务端，表示自己没有数据要进行传输，单面连接传输要关闭。发送完后，客户端进入状态。
第二次挥手：服务端收到请求包后，发回ACK=1,ack=x+1的确认包，表示确认断开连接。服务端进入CLOSE_WAIT状态。客户端收到该包后，进入FIN_WAIT_2状态。此时客户端到服务端的数据连接已断开。
第三次挥手：服务端发送FIN=1,seq=y的包给客户端，表示自己没有数据要给客户端了。发送完后进入LAST_ACK状态，等待客户端的确认包。
第四次挥手：客户端收到请求包后，发送ACK=1,ack=y+1的确认包给服务端，并进入TIME_WAIT状态，有可能要重传确认包。服务端收到确认包后，进入CLOSED状态，服务端到客户端的连接已断开。客户端等到一段时间后也会进入CLOSED状态。
四次挥手原因 由于TCP的连接是全双工，双方都可以主动传输数据，一方的断开需要告知对方，让对方可以相关操作，负责任的表现。
使用TCP协议有：FTP（文件传输协议）、Telnet（远程登录协议）、SMTP（简单邮件传输协议）、POP3（和SMTP相对，用于接收邮件）、HTTP协议等</description></item><item><title>UDP协议</title><link>https://no-sky.github.io/2019/udp-layer/</link><pubDate>Fri, 22 Nov 2019 16:40:52 +0800</pubDate><guid>https://no-sky.github.io/2019/udp-layer/</guid><description>TCP 和 UDP 有哪些区别？ TCP 是面向连接的，UDP 是面向无连接的。 什么叫面向连接，什么叫无连接呢？在互通之前，面向连接的协议会先建立连接。 所谓的建立连接，是为了在客户端和服务端维护连接，而建立一定的数据结构来维护双方交互的状态， 用这样的数据结构来保证所谓的面向连接的特性。
UDP协议 UDP协议，即用户数据报协议（User Datagram Protocol），是一个简单的面向数据报的传输层协议。UDP协议只在IP数据报服务商增加了很少一点的功能，就是复用和分用，以及差错检测的功能。
UDP协议的主要特点 （1）无连接的
发送数据之前不需要建立连接，减少了开销和发送数据之前的时延。
（2）尽最大努力交付
不保证可靠的交付，主机不需要维持复杂的链接状态表。
（3）面向报文的
发送方的UDP对应用程序交下来的报文，在添加首部后就向下交付给IP层。既不拆分，也不合并，而是保留这些报文的边界，因此，应用程序需要选择合适的报文大小。
（4）没有拥塞控制。
（5）支持一对一、多对一和多对多的交互通信。
（6）首部开销小，只有8个字节。
UDP数据报的首部结构
用户数据报UDP有两个字段：数据字段和首部字段。首部字段只有8个字节，如下图所示：
UDP首部由4各字段组成，各占两个字节：
（1）源端口
在需要对方回信时使用，不需要时全为0。
（2）目的端口
发送UDP数据报的目的地。
（3）长度
UDP数据报的长度，最短为8个字节，只包含首部。
（4）检验和
用于检验UDP数据报在传输过程中有没有出差错，有则丢弃。</description></item></channel></rss>